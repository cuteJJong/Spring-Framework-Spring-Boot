삽질 순서
1. 순수 자바로 된 프로젝트를 만들어본다
2. 내가 직접 심플 스프링을 만들어본다
3. 스프링을 활용해서 내가 만든 프로젝트를 동작하게 한다

프로젝트 설명
편의점 결제 서비스(일명 ’편결이')
사용자가 편의점에서 간편결제로 결제할 수 있는 시스템 개발
사용자 → 편결이 → 결제수단 시스템(이미 만들어져 있음) 호출

프로젝트 생성
개발환경 소개Part. 02. 스프링 프레임워크 이론 2
Mac 또는 Windows
IDE: IntelliJ Ultimate 추천(Community 버전 또는 Eclipse도 가능)
Language : Java(jdk 11)
Project : Gradle Project
Spring Boot : 2.6.4
프로젝트 생성 : start.spring.io
Group : com.zerobase
Artifact : heart

# 2 프로젝트 1년차 개발(순수 자바)
기획자의 요구사항 기획 내용
편의점에서 결제만 되면 됩니다.
편의점은 G25, GU, 세븐입니다.
결제만 되게 해주세요!! 👏👏👏👏
요구사항 분석 결과
편의점은 정확히 정해져 있으니 enum으로 관리
결제수단은 가장 간단한 money만 일단 사용하자! (빠른 개발)

```plaintext
+------------------+         +------------------+         +--------------------+
| 사용자 (클라이언트) |         |   결제 서비스     |         |   머니 어댑터        |
+------------------+         +------------------+         +--------------------+
                            | + 결제             |         | + 머니 사용           |
                            | + 결제 취소        |         | + 머니 사용 취소      |
                            +------------------+         +--------------------+
        |                               |                                |
        |------------------------------>|                                |
                                        |------------------------------->|

#3 프로젝트 2년차 개발(순수 자바)
기획자의 요구사항 기획 내용
    -사용자들이 카드결제도 하고 싶어합니다!
    -사용자가 머니나 카드를 선택했을 때 해당 결제수단으로 결제되도록 해주세요!
요구사항 분석 결과Part. 02. 스프링 프레임워크 이론 4
    -사용자의 결제 요청에 결제수단 정보 추가(머니/카드)
    -근데 회사에 다른 결제수단(포인트, 상품권)들도 나중에 추가될 수 있지 않을까?
    -결제수단이 나중에 더 추가되더라도 덜 고통스러운 방법이 없을까..??

💡 그건 바로 DIP(의존성 역전 원칙) : 어댑터들이 우리의 규칙(Interface)를 지키도록 만들자

# 클래스 UML

```plaintext
사용자 (클라이언트)  -------->  결제 서비스  -------->  <Interface> PaymentInterface
                          + 결제                      + 결제수단 사용
                          + 결제 취소                  + 결제수단 사용 취소

                                                     |
                                                     |
                        ----------------------------|
                        |                            |
                    머니 어댑터                  카드 어댑터
              + 머니 사용                      + 인증
              + 머니 사용 취소                 + 승인
                                               + 취소
                                               + 매입 취소


#4 프로젝트 3년차 개발(순수 자바)
기획자의 요구사항 기획 내용
-이젠 할인이 들어가야 합니다!!
-근데 편의점에 따라 할인을 할지, 결제 수단에 따라 할인을 할지, 다른 방법으로 할지 정책을 못 정했어요

요구사항 분석 결과
-어쨌든 할인은 들어가려고 하고 있고
-먼저 개발하고 있다가 나중에 할인 정책이 정해지면 구현체를 선택해주자.

💡 OCP(개방 폐쇄 원칙) : if ~ else ~ 보다는 정책 별 클래스를 구현하자